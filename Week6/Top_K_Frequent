#https://leetcode.com/problems/top-k-frequent-elements/
from typing import List
import heapq

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        nums = sorted(nums)
        elements = []
        last = nums[0]
        count = 1
        for i in range(1,len(nums)):
            #if we find a new number
            if nums[i] != last :
                entry = (count, nums[i-1])
                #check if the minheap is full
                if len(elements) >= k:
                    #if its full and the new entry has a higher count
                    if entry[0] > elements[0][0]:
                        heapq.heapreplace(elements, entry)
                else:
                    heapq.heappush(elements, entry)
                count = 0
                last = nums[i]
            count += 1

        #retrieve the last pair
        entry = (count, nums[len(nums) - 1])
        if len(elements) >= k:
            #if its full and the new entry has a higher count
            if entry[0] > elements[0][0]:
                heapq.heapreplace(elements, entry)
        else:
            heapq.heappush(elements, entry)

        return [x[1] for x in elements]

        



