#https://leetcode.com/problems/string-to-integer-atoi/description/

class Solution:
    def myAtoi(self, s: str) -> int:
        
        #Remove the leading whitespace
        s = s.lstrip()
        
        #Edge case of empty string
        if not s:
            return 0

        #Find the sign: if not negative we assume positive
        sign = 1
        index = 0
        
        if s[0] == '-':
            sign = -1
            index = 1
        elif s[0] == '+':
            index = 1

        #Skip leading zeros
        size = len(s)
        
        while index < size and s[index] == 0:
            index += 1
        #All leading zeros so it's 0
        if index == size:
            return 0

        #We've finished leading zeros, now we find the number
        start = index


        #Stop at the end or when it's not a digit
        while index < size and s[index].isdigit():
            index += 1

        #Edge case where we immediately find not a digit
        if start == index:
            return 0

        #Parse and return int of our string
        res = s[start:index]
        
        ret = 0
        mult = 1

        maxNum = 2**31
        minNum = -2**31

        for i in range(len(res) - 1, -1, -1):
            num =  int(res[i]) * mult
            ret = ret + num
            mult *= 10

            if ret >= maxNum:
                return maxNum - 1 if sign == 1 else -maxNum 

        return ret * sign
            


        

        
        
        