from collections import deque
from typing import List
# https://leetcode.com/problems/rotting-oranges/

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        minutes = 0
        fresh = 0
        q = deque()

        rows = len(grid)
        cols = len(grid[0])

        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == 2:
                    q.append([i,j])
                if grid[i][j] == 1:
                    fresh += 1
        
        if fresh == 0:
            return minutes


        directions = [[0,1], [0, -1],[-1, 0],[1, 0]]
        
        
        while q:
            for _ in range(len(q)):
                i, j = q.popleft()
                grid[i][j] == 0
                for hor, ver in directions:
                    a, b = i + hor, j + ver
                    if (a < rows and
                    b < cols and
                    a >= 0 and
                    b >= 0 and
                    grid[a][b] == 1):
                        grid[a][b] = 2
                        q.append([a,b])
                        fresh -= 1      
            minutes += 1

        if fresh > 0:
            return -1
        else:
            return minutes - 1
            
                



        